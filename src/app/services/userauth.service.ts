import { Injectable } from '@angular/core';

import { User } from '../interfaces/user';

@Injectable({
  providedIn: 'root'
})
export class UserauthService {
  private users:User[]=[];
  private newUser:User;
  private isloggedin:boolean;
  private loggedInUser:number=-1;
  constructor() {
    this.isloggedin=false;
    this.newUser={
      id:0,
      email:'',
      password:'password',
      firstName:'',
      lastName:'',
      phone:'',
      resume:'',
      portfolioURL:'',
      roles:[],
      referrer:'',
      profilePhoto:'',
      sendUpdates:false,
      percentage:0,
      yop:'',
      qualification:'',
      stream:'',
      college:'',
      otherCollege:'',
      collegelocation:'',
      applicantType:'experienced',
      yoe:0,
      currentCTC:'',
      expectedCTC:'',
      expertise:[],
      otherExp:'',
      familiar:[],
      otherFam:'',
      onNotice:false,
      haveAppeared:false,
      noticeDuration:'',
      noticeEnd:'',
      roleAppeared:''
    }
    this.users.push({
      id:0,
      email:'x@y.z',
      password:'password',
      firstName:'',
      lastName:'',
      phone:'',
      resume:'',
      portfolioURL:'',
      roles:[],
      referrer:'',
      profilePhoto:'',
      sendUpdates:false,
      percentage:0,
      yop:'',
      qualification:'',
      stream:'',
      college:'',
      otherCollege:'',
      collegelocation:'',
      applicantType:'experienced',
      yoe:0,
      currentCTC:'',
      expectedCTC:'',
      expertise:[],
      otherExp:'',
      familiar:[],
      otherFam:'',
      onNotice:false,
      haveAppeared:false,
      noticeDuration:'',
      noticeEnd:'',
      roleAppeared:''
    })
  }
  setDetails(
    firstName:string,
    lastname:string,
    photo:string,
    email:string,
    phone:string,
    resume:string,
    url:string,
    role:number[],
    ref:string,
    supd:boolean
  ){
    this.newUser.firstName=firstName;
    this.newUser.lastName=lastname;
    this.newUser.email=email;
    this.newUser.resume=resume;
    this.newUser.portfolioURL=url==''?null:url;
    this.newUser.roles=role;
    this.newUser.referrer=ref==''?null:ref;
    this.newUser.sendUpdates=supd;
    this.newUser.profilePhoto=photo==""?null:photo;
    this.newUser.phone=phone;
    console.log(this.newUser)
  }
  setEduQuals(
    perc:number,
    yop:string,
    qualification:string,
    stream:string,
    college:string,
    other:string,
    loc:string){
    this.newUser.percentage=perc;
    this.newUser.yop=yop;
    this.newUser.qualification=qualification;
    this.newUser.stream=stream;
    this.newUser.college=college;
    this.newUser.otherCollege=college=="other"?other:"-";
    this.newUser.collegelocation=loc;
    console.log(this.newUser)
  }
  setProQuals(
    applitype:string,
    yoe:number,
    currentCTC:string,
    expectedCTC:string,
    expertise:string[],
    otherExp:string,
    familiar:string[],
    otherFam:string,
    onNotice:boolean,
    noticeEnd:string,
    noticeDuration:string,
    haveAppeared:boolean,
    roleAppeared:string
  ){
    console.log(otherFam)
    this.newUser.applicantType=applitype;
    this.newUser.yoe=applitype=="experienced"?yoe:null;
    this.newUser.currentCTC=applitype=="experienced"?currentCTC:null;
    this.newUser.expectedCTC=applitype=="experienced"?expectedCTC:null;
    this.newUser.expertise=applitype=="experienced"?expertise:null;
    this.newUser.otherExp=applitype=="experienced"?otherExp:null;
    this.newUser.familiar=familiar;
    this.newUser.otherFam=otherFam;
    this.newUser.onNotice=applitype=="experienced"?onNotice:false;
    this.newUser.noticeDuration=onNotice?noticeDuration:null;
    this.newUser.noticeEnd=onNotice?noticeEnd:null;
    this.newUser.haveAppeared=haveAppeared;
    this.newUser.roleAppeared=haveAppeared?roleAppeared:null;
  }
  getNewUser(){
    return this.newUser
  }
  cancelNewUser(){
    this.newUser={
      id:0,
      email:'',
      password:'password',
      firstName:'',
      lastName:'',
      phone:'',
      resume:'',
      portfolioURL:'',
      roles:[],
      referrer:'',
      profilePhoto:'',
      sendUpdates:false,
      percentage:0,
      yop:'',
      qualification:'',
      stream:'',
      college:'',
      otherCollege:'',
      collegelocation:'',
      applicantType:'experienced',
      yoe:0,
      currentCTC:'',
      expectedCTC:'',
      expertise:[],
      otherExp:'',
      familiar:[],
      otherFam:'',
      onNotice:false,
      haveAppeared:false,
      noticeDuration:'',
      noticeEnd:'',
      roleAppeared:''
    }    
  }
  saveUser():boolean{
    let nu=this.newUser
    if(
      nu.firstName==''||
      nu.lastName==''||
      nu.email==''||
      nu.phone==''||
      nu.roles.length==0
    ){
      return false;
    }
    if(
      nu.percentage==null||
      nu.qualification==''||
      nu.stream==''||
      nu.college==''||
      (nu.college=='Others'&&nu.otherCollege=='')||
      nu.collegelocation==''
    ){
      return false;
    }
    if(
      nu.familiar.length==0||
      (nu.familiar.includes('Others')&&nu.otherFam=='')
    ){
      return false;
    }
    if (nu.applicantType=="experienced"&&
    (
      nu.yoe==null||
      nu.yoe==0||
      nu.currentCTC==''||
      nu.currentCTC==null||
      nu.expectedCTC==''||
      nu.expectedCTC==null||
      nu.expertise==null||
      nu.expertise?.length==0||
      (nu.expertise.includes('Other')&&nu.otherExp=='')||
      (nu.onNotice&&(
        nu.noticeDuration==''||
        nu.noticeDuration==null||
        nu.noticeEnd==''||
        nu.noticeEnd==null
      ))
    )
    ){
      return false;
    }
    let user:User={
      id:this.users.length,
      email:nu.email,
      password:nu.password,
      firstName:nu.firstName,
      lastName:nu.lastName,
      phone:nu.phone,
      resume:nu.resume,
      portfolioURL:nu.portfolioURL,
      roles:nu.roles,
      referrer:nu.referrer,
      profilePhoto:nu.profilePhoto,
      sendUpdates:nu.sendUpdates,
      percentage:nu.percentage,
      yop:nu.yop,
      qualification:nu.qualification,
      stream:nu.stream,
      college:nu.college,
      otherCollege:nu.otherCollege,
      collegelocation:nu.collegelocation,
      applicantType:nu.applicantType,
      yoe:nu.yoe,
      currentCTC:nu.currentCTC,
      expectedCTC:nu.expectedCTC,
      expertise:nu.expertise,
      otherExp:nu.otherExp,
      familiar:nu.familiar,
      otherFam:nu.otherFam,
      onNotice:nu.onNotice,
      haveAppeared:nu.haveAppeared,
      noticeDuration:nu.noticeDuration,
      noticeEnd:nu.noticeEnd,
      roleAppeared:nu.roleAppeared
    }
    this.users.push(user)
    console.log(this.users)
    return true;
  }
  logIn(email:string,password:string):boolean{
    let l=this.users.find(t=>t.email==email);
    if(l?.password==password){
      this.isloggedin=true;
      this.loggedInUser=l.id;
      return true;
    }
    return false;
  }
  isLoggedIn():boolean{
    return this.isloggedin
  }
  getLoggedUser():number{
    return this.loggedInUser;
  }
}
